#include "stm32f4xx.h"
#include "stm32f4_discovery.h"

GPIO_Config(void)
{
	RCC->CR |= 0x00030000; // HSEON and HSEONRDY enable
	while(!(RCC->CR & 0x00020000)); // is HSEONRDY?
	RCC->CR |= 0x00080000; // Clock Security System enable
	RCC->PLLCFGR |= 0x00400000; // PLL HSEON enable
	RCC->PLLCFGR |= 0x00000004; // PLL M = 4
	RCC->PLLCFGR |= 0x00005A00; // PLL N = 168
	RCC->PLLCFGR |= 0x00000000; // PLL P = 2
	RCC->CFGR |= 0x00000000; // AHB1 freq 168 MHz max
	RCC->CFGR |= 0x00001400; // APB1 freq 42 MHz max
	RCC->CFGR |= 0x00008000; // APB2 freq 84 MHz max
	RCC->CIR |= 0x00080000; // HSERDY flag clear
	RCC->CIR |= 0x00800000; // CSS flag clear

	// portlarý register ile aktif etme
	RCC->AHB1ENR |= 0x00000008; // GPIOD port enable
	RCC->AHB1ENR |= 0x00000001; // GPIOA port enable

	// GPIO Pin configuration
	GPIOA->MODER |= 0x00000000; // GPIOA port Pin 0 input mode
	GPIOD->MODER = 0x55000000; // GPIOD port 12 13 14 15 pin output mode
	GPIOD->OTYPER = 0x00000000; // 12 13 14 15 pins push pull reset state
	GPIOD->OSPEEDR = 0xFF000000; // GPIOD port pins output speed very high speed (100 MHz)
	GPIOD->PUPDR = 0x00000000; // GPIOD pins no pull





}

int main(void)
{
  while (1)
  {
  }
}


void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
  /* TODO, implement your code here */
  return;
}

uint16_t EVAL_AUDIO_GetSampleCallBack(void){
  /* TODO, implement your code here */
  return -1;
}
